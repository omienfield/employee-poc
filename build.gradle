plugins {
    id("com.github.johnrengelman.shadow") version "7.1.2"
    id("io.micronaut.application") version "3.4.1"
}

version = "0.1"
group = "com.example"

repositories {
    mavenCentral()
}

dependencies {
//    testImplementation("org.junit.jupiter:junit-jupiter-api")
//    testImplementation("io.projectreactor:reactor-test:3.4.10")
//    testImplementation("nl.jqno.equalsverifier:equalsverifier:3.7.1")
//    testImplementation("org.msgpack:jackson-dataformat-msgpack:0.9.0")
//    testImplementation("io.micronaut.test:micronaut-test-junit5:3.0.2")
//    testImplementation 'org.junit.jupiter:junit-jupiter-params'

//    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:5.7.1")
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:5.7.1")
    implementation ("org.mapstruct:mapstruct:1.5.1.Final")
    annotationProcessor ("org.mapstruct:mapstruct-processor:1.5.1.Final")

    testImplementation "org.mockito:mockito-core:4.0.0"
    testImplementation "org.mockito:mockito-junit-jupiter:4.0.0"
//    annotationProcessor("org.projectlombok:lombok")
    implementation 'javax.inject:javax.inject:1'
    annotationProcessor("io.micronaut.data:micronaut-data-processor")
    annotationProcessor("org.projectlombok:lombok")
//    annotationProcessor("io.micronaut:micronaut-http-validation")
//    implementation("io.micronaut:micronaut-http-client")
    implementation("io.micronaut:micronaut-jackson-databind")
    implementation("io.micronaut.beanvalidation:micronaut-hibernate-validator")
    implementation("io.micronaut.data:micronaut-data-hibernate-jpa")
    implementation("io.micronaut.sql:micronaut-hibernate-jpa")
    implementation("io.micronaut.sql:micronaut-jdbc-hikari")
    implementation("jakarta.annotation:jakarta.annotation-api")
//    compileOnly("org.projectlombok:lombok")
    runtimeOnly("ch.qos.logback:logback-classic")
    runtimeOnly("org.postgresql:postgresql")
    testImplementation("org.testcontainers:junit-jupiter")
    testImplementation("org.testcontainers:postgresql")
    testImplementation("org.testcontainers:testcontainers")
//    implementation("io.micronaut:micronaut-validation")

    testImplementation("org.mockito:mockito-core")

    testCompileOnly 'org.projectlombok:lombok:1.18.24'
//    compileOnly "io.micronaut:micronaut-inject-groovy"

    compileOnly platform("io.micronaut:micronaut-bom:$micronautVersion")
    compileOnly "io.micronaut:micronaut-inject-groovy"
//    compileOnly "io.micronaut.configuration:micronaut-openapi"
    implementation platform("io.micronaut:micronaut-bom:$micronautVersion")
    implementation "io.swagger.core.v3:swagger-annotations"
//    implementation "io.micronaut:micronaut-runtime-groovy"
    implementation "io.micronaut:micronaut-validation"
    implementation "io.micronaut:micronaut-http-server-netty"
    implementation "io.micronaut:micronaut-http-client"
    runtimeOnly "ch.qos.logback:logback-classic:1.2.3"
    testCompileOnly platform("io.micronaut:micronaut-bom:$micronautVersion")
    testImplementation("org.spockframework:spock-core") {
        exclude group: "org.codehaus.groovy", module: "groovy-all"
    }
    testImplementation "io.micronaut:micronaut-inject-groovy"
    testImplementation "io.micronaut.test:micronaut-test-spock"
    testImplementation "io.micronaut.test:micronaut-test-junit5"
    testRuntimeOnly "org.junit.vintage:junit-vintage-engine:5.5.0"
    compileOnly("org.projectlombok:lombok")
    testCompileOnly 'org.projectlombok:lombok:1.18.24'

    // security
    compileOnly "io.micronaut.security:micronaut-security-annotations"
    implementation "io.micronaut.security:micronaut-security-jwt"
    implementation "org.springframework.security:spring-security-crypto:5.2.1.RELEASE"

    implementation("io.micronaut.rxjava3:micronaut-rxjava3")
    implementation("io.micronaut.rxjava3:micronaut-rxjava3-http-client")
}
//sourceSets {
//    test {
//        java.srcDirs = ['src/test/']
//    }
//}
test {
    useJUnitPlatform()
}

test.classpath += configurations.developmentOnly
application {
    mainClass.set("com.example.Application")
}
java {
    sourceCompatibility = JavaVersion.toVersion("11")
    targetCompatibility = JavaVersion.toVersion("11")
}

graalvmNative.toolchainDetection = false
micronaut {
    runtime("netty")
    testRuntime("junit5")
    processing {
        incremental(true)
        annotations("com.example.*")
    }
}